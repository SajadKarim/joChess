buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'org.openclover:clover:4.2.0'
    }
}

plugins {
	id 'java'
	id 'eclipse'
}

repositories {
    mavenCentral()
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
	compile group: 'org.jdesktop', name: 'appframework', version: '1.0+'
	compile group: 'org.jdesktop', name: 'swing-worker', version: '1.1+'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
	// https://mvnrepository.com/artifact/com.google.inject/guice
	compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
	// https://mvnrepository.com/artifact/org.javatuples/javatuples
	compile group: 'org.javatuples', name: 'javatuples', version: '1.2'
	
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
   	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'

	// https://mvnrepository.com/artifact/org.openclover/clover
	compile group: 'org.openclover', name: 'clover', version: '4.2.0'
 	//cloverCompile 'org.openclover:clover:4.2.0'
 } 


jar {
  manifest { 
    attributes "Main-Class": "jchess.Main"
  }  

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

//test {
 //   useJUnitPlatform()
//}

configurations {
    cloverRuntime
    cloverRuntime.extendsFrom cloverCompile
}
 
task cloverInstr() {
    inputs.files sourceSets.main.allJava
    outputs.dir "$buildDir/sources-instr"

    doFirst {
        def argsList = ["--initstring", "${buildDir}/clover/clover.db",
                        "-d", "${buildDir}/sources-instr"]
        argsList.addAll(inputs.files.files.collect({ file ->
            file.absolutePath
        }))
        String[] args = argsList.toArray()

        com.atlassian.clover.CloverInstr.mainImpl(args)
    }
}

test {
	useJUnitPlatform()

}

task cloverReport {
    inputs.dir "${buildDir}/clover"
    outputs.dir "${reportsDir}/clover"
    onlyIf {
        file("${buildDir}/clover/clover.db").exists()
    }
    doFirst {
        def argsList = ["--initstring", "${buildDir}/clover/clover.db",
                        "-o", "${reportsDir}/clover"]
        String[] args = argsList.toArray()
        com.atlassian.clover.reporters.html.HtmlReporter.runReport(args)
    }
}